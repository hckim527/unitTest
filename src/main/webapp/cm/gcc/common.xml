<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml"
xmlns:ev="http://www.w3.org/2001/xml-events"
xmlns:w2="http://www.inswave.com/websquare"
xmlns:xf="http://www.w3.org/2002/xforms">
	<head>
		<w2:type>COMMON</w2:type>
		<w2:buildDate/>
		<w2:MSA/>
		<xf:model>
			<w2:dataCollection baseNode="map">
			</w2:dataCollection>
			<w2:workflowCollection>
			</w2:workflowCollection>
		</xf:model>
		<w2:layoutInfo>
		</w2:layoutInfo>
		<w2:publicInfo method=""/>
		<script type="text/javascript" lazy="false">scwin.strNameSpace = 'xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:ev=&quot;http://www.w3.org/2001/xml-events&quot; xmlns:w2=&quot;http://www.inswave.com/websquare&quot; xmlns:xf=&quot;http://www.w3.org/2002/xforms&quot;';    



scwin.onpageload = function () {

};



scwin.createCommonDatalist = function () {
    scwin.createDataListBoolean();
}



// dataList boolean 동적 생성 (true, false, 생략)
scwin.createDataListBoolean = function () {
    let strTarget = '';
    
    strTarget += '&lt;w2:dataList '+ scwin.strNameSpace +' baseNode=&quot;list&quot; repeatNode=&quot;map&quot; id=&quot;gdl_boolean&quot; saveRemovedData=&quot;true&quot;&gt;';
    strTarget += '&lt;w2:columnInfo&gt;';
    strTarget += '&lt;w2:column id=&quot;label&quot; name=&quot;name1&quot; dataType=&quot;text&quot;&gt;&lt;/w2:column&gt;';
    strTarget += '&lt;w2:column id=&quot;value&quot; name=&quot;name2&quot; dataType=&quot;text&quot;&gt;&lt;/w2:column&gt;';
    strTarget += '&lt;/w2:columnInfo&gt;';
    strTarget += '&lt;w2:data use=&quot;true&quot;&gt;';
    strTarget += '&lt;w2:row&gt;';
    strTarget += '&lt;value&gt;&lt;![CDATA[1]]&gt;&lt;/value&gt;';
    strTarget += '&lt;/w2:row&gt;';
    strTarget += '&lt;w2:row&gt;';
    strTarget += '&lt;label&gt;&lt;![CDATA[true]]&gt;&lt;/label&gt;';
    strTarget += '&lt;value&gt;&lt;![CDATA[2]]&gt;&lt;/value&gt;';
    strTarget += '&lt;/w2:row&gt;';
    strTarget += '&lt;w2:row&gt;';
    strTarget += '&lt;label&gt;&lt;![CDATA[false]]&gt;&lt;/label&gt;';
    strTarget += '&lt;value&gt;&lt;![CDATA[3]]&gt;&lt;/value&gt;';
    strTarget += '&lt;/w2:row&gt;';
    strTarget += '&lt;/w2:data&gt;';
    strTarget += '&lt;/w2:dataList&gt;';   

    $p.data.create(strTarget);
}



scwin.createBasicGroup = async function (grp_comp, cList='', eHandler='', cID='target1') {
    // comp 생성
    let strTarget = '';    
    let strButton = '';
    let strInput = '';
    let strGroup = '';

    // 조건, 이벤트 설정
    strTarget += '&lt;xf:group ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' style=&quot;width:400px; height:300px; background-color:var(--ws-green-500);&quot;&gt;&lt;/xf:group&gt;'
    
    console.log(strTarget);

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        'group',
        strTarget,
        grp_comp
    );
            
    strInput += '&lt;xf:input '+ scwin.strNameSpace +' id=&quot;&quot; style=&quot;width:144px; height:21px; &quot; initValue=&quot;input&quot;&gt;&lt;/xf:input&gt;';    
    
    // child 생성
    scwin.input1 = await $p.dynamicCreate(
        'input1',
        'input',
        strInput,
        scwin.target1
    );

    strGroup += '&lt;xf:group '+ scwin.strNameSpace +' style=&quot;width:150px; height:100px; background-color:var(--ws-orange-100);&quot; text=&quot;group&quot;&gt;&lt;/xf:group&gt;'  

    scwin.group1 = await $p.dynamicCreate(
        'group1',
        'group',
        strGroup,
        scwin.target1
    );

    strButton += '&lt;w2:button '+ scwin.strNameSpace +' style=&quot;width:80px; height:23px;&quot; label=&quot;button&quot;&gt;&lt;/w2:button&gt;'
    
    scwin.button1 = await $p.dynamicCreate(
        'button1',
        'button',
        strButton,
        scwin.target1
    );
}



scwin.createBasicInput = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';   
    strTarget += '&lt;xf:input ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' id=&quot;&quot; style=&quot;width:144px; height:21px; &quot; initValue=&quot;input&quot;&gt;&lt;/xf:input&gt;';
    
    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        'input',
        strTarget,
        grp_comp
    );
}



// 조건을 key=&quot;value&quot; 형태로 리턴
scwin.createCList = function (properties) {
    return Object.entries(properties)
        .filter(([key, value]) =&gt; value !== &quot;&quot;)  // 빈 문자열 제외
        .map(([key, value]) =&gt; `${key}=&quot;${value}&quot;`)  // key=&quot;value&quot; 형태로 변환
        .join(' ');  // 공백으로 각 property 연결
}</script>
	</head>
	<body ev:onpageload="scwin.onpageload">
	</body>
</html>
