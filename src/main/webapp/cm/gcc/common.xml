<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml"
xmlns:ev="http://www.w3.org/2001/xml-events"
xmlns:w2="http://www.inswave.com/websquare"
xmlns:xf="http://www.w3.org/2002/xforms">
	<head>
		<w2:type>COMMON</w2:type>
		<w2:buildDate/>
		<w2:MSA/>
		<xf:model>
			<w2:dataCollection baseNode="map">
			</w2:dataCollection>
			<w2:workflowCollection>
			</w2:workflowCollection>
		</xf:model>
		<w2:layoutInfo>
		</w2:layoutInfo>
		<w2:publicInfo method=""/>
		<script type="text/javascript" lazy="false">scwin.strNameSpace = 'xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:ev=&quot;http://www.w3.org/2001/xml-events&quot; xmlns:w2=&quot;http://www.inswave.com/websquare&quot; xmlns:xf=&quot;http://www.w3.org/2002/xforms&quot;';    



scwin.onpageload = function () {

};



scwin.createCommonDatalist = function () {
    scwin.createDataListBoolean();
    scwin.createDataListAutoComplete();
    scwin.createDataListCheckComboBox();
    scwin.createDataListSelectBox();
    scwin.createDataListGridView();
    scwin.createDataListCheckBox();
}



// dataList boolean 동적 생성 (true, false, 생략)
scwin.createDataListBoolean = function () {
    let strTarget = '';
    
    strTarget += '&lt;w2:dataList '+ scwin.strNameSpace +' baseNode=&quot;list&quot; repeatNode=&quot;map&quot; id=&quot;gdl_boolean&quot; saveRemovedData=&quot;true&quot;&gt;';
    strTarget += '&lt;w2:columnInfo&gt;';
    strTarget += '&lt;w2:column id=&quot;label&quot; name=&quot;name1&quot; dataType=&quot;text&quot;&gt;&lt;/w2:column&gt;';
    strTarget += '&lt;w2:column id=&quot;value&quot; name=&quot;name2&quot; dataType=&quot;text&quot;&gt;&lt;/w2:column&gt;';
    strTarget += '&lt;/w2:columnInfo&gt;';
    strTarget += '&lt;w2:data use=&quot;true&quot;&gt;';
    strTarget += '&lt;w2:row&gt;';
    strTarget += '&lt;value&gt;&lt;![CDATA[1]]&gt;&lt;/value&gt;';
    strTarget += '&lt;/w2:row&gt;';
    strTarget += '&lt;w2:row&gt;';
    strTarget += '&lt;label&gt;&lt;![CDATA[true]]&gt;&lt;/label&gt;';
    strTarget += '&lt;value&gt;&lt;![CDATA[2]]&gt;&lt;/value&gt;';
    strTarget += '&lt;/w2:row&gt;';
    strTarget += '&lt;w2:row&gt;';
    strTarget += '&lt;label&gt;&lt;![CDATA[false]]&gt;&lt;/label&gt;';
    strTarget += '&lt;value&gt;&lt;![CDATA[3]]&gt;&lt;/value&gt;';
    strTarget += '&lt;/w2:row&gt;';
    strTarget += '&lt;/w2:data&gt;';
    strTarget += '&lt;/w2:dataList&gt;';   

    $p.data.create(strTarget);
}

scwin.createDataListAutoComplete = function () {
    let strTarget = '';
    
    strTarget += '&lt;w2:dataList '+ scwin.strNameSpace +' baseNode=&quot;list&quot; repeatNode=&quot;map&quot; id=&quot;gdl_autocomplete&quot; saveRemovedData=&quot;true&quot;&gt;';
    strTarget += '&lt;w2:columnInfo&gt;';
    strTarget += '&lt;w2:column id=&quot;label&quot; name=&quot;name1&quot; dataType=&quot;text&quot;&gt;&lt;/w2:column&gt;';
    strTarget += '&lt;w2:column id=&quot;value&quot; name=&quot;name2&quot; dataType=&quot;text&quot;&gt;&lt;/w2:column&gt;';
    strTarget += '&lt;/w2:columnInfo&gt;';
    strTarget += '&lt;w2:data use=&quot;true&quot;&gt;';
    strTarget += '&lt;w2:row&gt;';
    strTarget += '&lt;label&gt;&lt;![CDATA[autocomplete1]]&gt;&lt;/label&gt;';
    strTarget += '&lt;value&gt;&lt;![CDATA[1]]&gt;&lt;/value&gt;';
    strTarget += '&lt;/w2:row&gt;';
    strTarget += '&lt;w2:row&gt;';
    strTarget += '&lt;label&gt;&lt;![CDATA[autocomplete2]]&gt;&lt;/label&gt;';
    strTarget += '&lt;value&gt;&lt;![CDATA[2]]&gt;&lt;/value&gt;';
    strTarget += '&lt;/w2:row&gt;';
    strTarget += '&lt;w2:row&gt;';
    strTarget += '&lt;label&gt;&lt;![CDATA[autocomplete3]]&gt;&lt;/label&gt;';
    strTarget += '&lt;value&gt;&lt;![CDATA[3]]&gt;&lt;/value&gt;';
    strTarget += '&lt;/w2:row&gt;';
    strTarget += '&lt;/w2:data&gt;';
    strTarget += '&lt;/w2:dataList&gt;';   

    $p.data.create(strTarget);    
}



scwin.createDataListCheckComboBox = function () {
    let strTarget = '';
    
    strTarget += '&lt;w2:dataList '+ scwin.strNameSpace +' baseNode=&quot;list&quot; repeatNode=&quot;map&quot; id=&quot;gdl_checkcombobox&quot; saveRemovedData=&quot;true&quot;&gt;';
    strTarget += '&lt;w2:columnInfo&gt;';
    strTarget += '&lt;w2:column id=&quot;label&quot; name=&quot;name1&quot; dataType=&quot;text&quot;&gt;&lt;/w2:column&gt;';
    strTarget += '&lt;w2:column id=&quot;value&quot; name=&quot;name2&quot; dataType=&quot;text&quot;&gt;&lt;/w2:column&gt;';
    strTarget += '&lt;/w2:columnInfo&gt;';
    strTarget += '&lt;w2:data use=&quot;true&quot;&gt;';
    strTarget += '&lt;w2:row&gt;';
    strTarget += '&lt;label&gt;&lt;![CDATA[checkcombobox1]]&gt;&lt;/label&gt;';
    strTarget += '&lt;value&gt;&lt;![CDATA[1]]&gt;&lt;/value&gt;';
    strTarget += '&lt;/w2:row&gt;';
    strTarget += '&lt;w2:row&gt;';
    strTarget += '&lt;label&gt;&lt;![CDATA[checkcombobox2]]&gt;&lt;/label&gt;';
    strTarget += '&lt;value&gt;&lt;![CDATA[2]]&gt;&lt;/value&gt;';
    strTarget += '&lt;/w2:row&gt;';
    strTarget += '&lt;w2:row&gt;';
    strTarget += '&lt;label&gt;&lt;![CDATA[checkcombobox3]]&gt;&lt;/label&gt;';
    strTarget += '&lt;value&gt;&lt;![CDATA[3]]&gt;&lt;/value&gt;';
    strTarget += '&lt;/w2:row&gt;';
    strTarget += '&lt;/w2:data&gt;';
    strTarget += '&lt;/w2:dataList&gt;';   

    $p.data.create(strTarget);    
}



scwin.createDataListCheckBox = function () {
    let strTarget = '';
    
    strTarget += '&lt;w2:dataList '+ scwin.strNameSpace +' baseNode=&quot;list&quot; repeatNode=&quot;map&quot; id=&quot;gdl_checkbox&quot; saveRemovedData=&quot;true&quot;&gt;';
    strTarget += '&lt;w2:columnInfo&gt;';
    strTarget += '&lt;w2:column id=&quot;label&quot; name=&quot;name1&quot; dataType=&quot;text&quot;&gt;&lt;/w2:column&gt;';
    strTarget += '&lt;w2:column id=&quot;value&quot; name=&quot;name2&quot; dataType=&quot;text&quot;&gt;&lt;/w2:column&gt;';
    strTarget += '&lt;/w2:columnInfo&gt;';
    strTarget += '&lt;w2:data use=&quot;true&quot;&gt;';
    strTarget += '&lt;w2:row&gt;';
    strTarget += '&lt;label&gt;&lt;![CDATA[checkbox1]]&gt;&lt;/label&gt;';
    strTarget += '&lt;value&gt;&lt;![CDATA[1]]&gt;&lt;/value&gt;';
    strTarget += '&lt;/w2:row&gt;';
    strTarget += '&lt;w2:row&gt;';
    strTarget += '&lt;label&gt;&lt;![CDATA[checkbox2]]&gt;&lt;/label&gt;';
    strTarget += '&lt;value&gt;&lt;![CDATA[2]]&gt;&lt;/value&gt;';
    strTarget += '&lt;/w2:row&gt;';
    strTarget += '&lt;w2:row&gt;';
    strTarget += '&lt;label&gt;&lt;![CDATA[checkbox3]]&gt;&lt;/label&gt;';
    strTarget += '&lt;value&gt;&lt;![CDATA[3]]&gt;&lt;/value&gt;';
    strTarget += '&lt;/w2:row&gt;';
    strTarget += '&lt;/w2:data&gt;';
    strTarget += '&lt;/w2:dataList&gt;';   

    $p.data.create(strTarget);    
}



scwin.createDataListSelectBox = function () {
    let strTarget = '';
    
    strTarget += '&lt;w2:dataList '+ scwin.strNameSpace +' baseNode=&quot;list&quot; repeatNode=&quot;map&quot; id=&quot;gdl_selectbox&quot; saveRemovedData=&quot;true&quot;&gt;';
    strTarget += '&lt;w2:columnInfo&gt;';
    strTarget += '&lt;w2:column id=&quot;label&quot; name=&quot;name1&quot; dataType=&quot;text&quot;&gt;&lt;/w2:column&gt;';
    strTarget += '&lt;w2:column id=&quot;value&quot; name=&quot;name2&quot; dataType=&quot;text&quot;&gt;&lt;/w2:column&gt;';
    strTarget += '&lt;/w2:columnInfo&gt;';
    strTarget += '&lt;w2:data use=&quot;true&quot;&gt;';
    strTarget += '&lt;w2:row&gt;';
    strTarget += '&lt;label&gt;&lt;![CDATA[selectbox1]]&gt;&lt;/label&gt;';
    strTarget += '&lt;value&gt;&lt;![CDATA[1]]&gt;&lt;/value&gt;';
    strTarget += '&lt;/w2:row&gt;';
    strTarget += '&lt;w2:row&gt;';
    strTarget += '&lt;label&gt;&lt;![CDATA[selectbox2]]&gt;&lt;/label&gt;';
    strTarget += '&lt;value&gt;&lt;![CDATA[2]]&gt;&lt;/value&gt;';
    strTarget += '&lt;/w2:row&gt;';
    strTarget += '&lt;w2:row&gt;';
    strTarget += '&lt;label&gt;&lt;![CDATA[selectbox3]]&gt;&lt;/label&gt;';
    strTarget += '&lt;value&gt;&lt;![CDATA[3]]&gt;&lt;/value&gt;';
    strTarget += '&lt;/w2:row&gt;';
    strTarget += '&lt;/w2:data&gt;';
    strTarget += '&lt;/w2:dataList&gt;';   

    $p.data.create(strTarget);    
}



scwin.createDataListGridView = function () {
    let strTarget = '';
    
    strTarget += '&lt;w2:dataList baseNode=&quot;list&quot; repeatNode=&quot;map&quot; id=&quot;gdl_gridview&quot; saveRemovedData=&quot;true&quot;&gt;';
    strTarget += '&lt;w2:columnInfo&gt;';
    strTarget += '&lt;w2:column id=&quot;column1&quot; name=&quot;name1&quot; dataType=&quot;text&quot;&gt;&lt;/w2:column&gt;';
    strTarget += '&lt;w2:column id=&quot;column2&quot; name=&quot;name2&quot; dataType=&quot;text&quot;&gt;&lt;/w2:column&gt;';
    strTarget += '&lt;w2:column id=&quot;column3&quot; name=&quot;name3&quot; dataType=&quot;text&quot;&gt;&lt;/w2:column&gt;';
    strTarget += '&lt;/w2:columnInfo&gt;';
    strTarget += '&lt;w2:data use=&quot;true&quot;&gt;';
    strTarget += '&lt;w2:row&gt;';
    strTarget += '&lt;column1&gt;&lt;![CDATA[가]]&gt;&lt;/column1&gt;';
    strTarget += '&lt;column2&gt;&lt;![CDATA[나]]&gt;&lt;/column2&gt;';
    strTarget += '&lt;column3&gt;&lt;![CDATA[다]]&gt;&lt;/column3&gt;';
    strTarget += '&lt;/w2:row&gt;';
    strTarget += '&lt;w2:row&gt;';
    strTarget += '&lt;column1&gt;&lt;![CDATA[라]]&gt;&lt;/column1&gt;';
    strTarget += '&lt;column2&gt;&lt;![CDATA[마]]&gt;&lt;/column2&gt;';
    strTarget += '&lt;column3&gt;&lt;![CDATA[바]]&gt;&lt;/column3&gt;';
    strTarget += '&lt;/w2:row&gt;';
    strTarget += '&lt;w2:row&gt;';
    strTarget += '&lt;column1&gt;&lt;![CDATA[사]]&gt;&lt;/column1&gt;';
    strTarget += '&lt;column2&gt;&lt;![CDATA[아]]&gt;&lt;/column2&gt;';
    strTarget += '&lt;column3&gt;&lt;![CDATA[자]]&gt;&lt;/column3&gt;';
    strTarget += '&lt;/w2:row&gt;';
    strTarget += '&lt;/w2:data&gt;';
    strTarget += '&lt;/w2:dataList&gt;';   

    $p.data.create(strTarget);    
}



scwin.createBasicGroup = async function (grp_comp, cList='', eHandler='', cID='target1') {
    // comp 생성
    let strTarget = '';    
    let strButton = '';
    let strInput = '';
    let strGroup = '';

    // 조건, 이벤트 설정
    strTarget += '&lt;xf:group ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' style=&quot;width:400px; height:300px; background-color:var(--ws-green-500);&quot;&gt;&lt;/xf:group&gt;'
    
    console.log(strTarget);

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        'group',
        strTarget,
        grp_comp
    );
            
    strInput += '&lt;xf:input '+ scwin.strNameSpace +' id=&quot;&quot; style=&quot;width:144px; height:21px; &quot; initValue=&quot;input&quot;&gt;&lt;/xf:input&gt;';    
    
    // child 생성
    scwin.input1 = await $p.dynamicCreate(
        'input1',
        'input',
        strInput,
        scwin[cID]
    );

    strGroup += '&lt;xf:group '+ scwin.strNameSpace +' style=&quot;width:150px; height:100px; background-color:var(--ws-orange-100);&quot; text=&quot;group&quot;&gt;&lt;/xf:group&gt;'  

    scwin.group1 = await $p.dynamicCreate(
        'group1',
        'group',
        strGroup,
        scwin[cID]
    );

    strButton += '&lt;w2:button '+ scwin.strNameSpace +' style=&quot;width:80px; height:23px;&quot; label=&quot;button&quot;&gt;&lt;/w2:button&gt;'
    
    scwin.button1 = await $p.dynamicCreate(
        'button1',
        'button',
        strButton,
        scwin[cID]
    );
}



scwin.createBasicButton = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';   
    strTarget += '&lt;w2:button ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' style=&quot;width:150px; height:50px;&quot; id=&quot;&quot; label=&quot;button&quot;&gt;&lt;/w2:button&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;button&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicInput = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';   
    strTarget += '&lt;xf:input ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' id=&quot;&quot; style=&quot;width:144px; height:21px;&quot;&gt;&lt;/xf:input&gt;';
    
    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        'input',
        strTarget,
        grp_comp
    );
}



scwin.createBasicAccordion = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:accordion ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' style=&quot;width:200px; height:300px;&quot;&gt;';
    strTarget += '&lt;w2:panels style=&quot;&quot; id=&quot;panels1&quot; class=&quot;&quot;&gt;';
    strTarget += '&lt;w2:panelTitle style=&quot;&quot; id=&quot;panelTitle1&quot; label=&quot;1&quot;&gt;&lt;/w2:panelTitle&gt;';
    strTarget += '&lt;w2:panelContent style=&quot;&quot; id=&quot;panelContent1&quot;&gt;';
    strTarget += '&lt;w2:button style=&quot;width:80px; height:23px; &quot; id=&quot;&quot; label=&quot;panel1&quot;&gt;&lt;/w2:button&gt;';
    strTarget += '&lt;/w2:panelContent&gt;';
    strTarget += '&lt;/w2:panels&gt;';
    strTarget += '&lt;w2:panels style=&quot;&quot; id=&quot;panels2&quot; class=&quot;&quot;&gt;';
    strTarget += '&lt;w2:panelTitle style=&quot;&quot; id=&quot;panelTitle2&quot; label=&quot;2&quot;&gt;&lt;/w2:panelTitle&gt;';
    strTarget += '&lt;w2:panelContent style=&quot;&quot; id=&quot;panelContent2&quot;&gt;';
    strTarget += '&lt;w2:button style=&quot;width:80px; height:23px; &quot; id=&quot;&quot; label=&quot;panel2&quot;&gt;&lt;/w2:button&gt;';
    strTarget += '&lt;/w2:panelContent&gt;';
    strTarget += '&lt;/w2:panels&gt;';
    strTarget += '&lt;w2:panels style=&quot;&quot; id=&quot;panels3&quot; class=&quot;&quot;&gt;';
    strTarget += '&lt;w2:panelTitle style=&quot;&quot; id=&quot;panelTitle3&quot; label=&quot;3&quot;&gt;&lt;/w2:panelTitle&gt;';
    strTarget += '&lt;w2:panelContent style=&quot;&quot; id=&quot;panelContent3&quot;&gt;';
    strTarget += '&lt;w2:button style=&quot;width:80px; height:23px; &quot; id=&quot;&quot; label=&quot;panel3&quot;&gt;&lt;/w2:button&gt;';
    strTarget += '&lt;/w2:panelContent&gt;';
    strTarget += '&lt;/w2:panels&gt;';
    strTarget += '&lt;/w2:accordion&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;accordion&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicAnchor = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:anchor ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' id=&quot;&quot; style=&quot;width:150px; height:50px;&quot;&gt;';    
    strTarget += '&lt;xf:label&gt;&lt;![CDATA[Insert Text]]&gt;&lt;/xf:label&gt;';
    strTarget += '&lt;/w2:anchor&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;anchor&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicAutoComplete = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:autoComplete ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' style=&quot;width:150px; height:30px;&quot;&gt;';
    strTarget += '&lt;w2:choices&gt;';
    strTarget += '&lt;w2:itemset nodeset=&quot;data:gdl_autocomplete&quot;&gt;';
    strTarget += '&lt;w2:label ref=&quot;label&quot;&gt;&lt;/w2:label&gt;';
    strTarget += '&lt;w2:value ref=&quot;value&quot;&gt;&lt;/w2:value&gt;';
    strTarget += '&lt;/w2:itemset&gt;';
    strTarget += '&lt;/w2:choices&gt;';
    strTarget += '&lt;/w2:autoComplete&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;autoComplete&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicCalendar = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:calendar ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' id=&quot;&quot; style=&quot;width:280px; height:300px; &quot;&gt;&lt;/w2:calendar&gt;';
   
    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;calendar&quot;,
        strTarget,
        grp_comp
    );

    scwin[cID].gotoCalendar(&quot;20250101&quot;);
}


scwin.createBasicCheckBox = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;xf:select ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' selectedindex=&quot;-1&quot; id=&quot;&quot; appearance=&quot;full&quot; style=&quot;width:148px;height: 100px;&quot; cols=&quot;&quot; rows=&quot;&quot;&gt;';
    strTarget += '&lt;xf:choices&gt;';
    strTarget += '&lt;xf:itemset nodeset=&quot;data:gdl_checkbox&quot;&gt;';
    strTarget += '&lt;xf:label ref=&quot;label&quot;&gt;&lt;/xf:label&gt;';
    strTarget += '&lt;xf:value ref=&quot;value&quot;&gt;&lt;/xf:value&gt;';
    strTarget += '&lt;/xf:itemset&gt;';
    strTarget += '&lt;/xf:choices&gt;';
    strTarget += '&lt;/xf:select&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;checkbox&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicCheckComboBox = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;xf:checkcombobox ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' style=&quot;width:200px; height:30px; &quot;&gt;';
    strTarget += '&lt;xf:choices&gt;';
    strTarget += '&lt;xf:itemset nodeset=&quot;data:gdl_checkcombobox&quot;&gt;';
    strTarget += '&lt;xf:label ref=&quot;label&quot;&gt;&lt;/xf:label&gt;';
    strTarget += '&lt;xf:value ref=&quot;value&quot;&gt;&lt;/xf:value&gt;';
    strTarget += '&lt;/xf:itemset&gt;';
    strTarget += '&lt;/xf:choices&gt;';
    strTarget += '&lt;/xf:checkcombobox&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;checkcombobox&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicDatePicker = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:datePicker ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' style=&quot;width:300px; height:200px; position:relative; &quot; id=&quot;&quot;&gt;&lt;/w2:datePicker&gt;';
    
    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;datePicker&quot;,
        strTarget,
        grp_comp
    );
}    	



scwin.createBasicEditor = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:editor ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' style=&quot;width:500px; height:300px; &quot; id=&quot;&quot;&gt;&lt;/w2:editor&gt;';    

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;editor&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicFlipToggle = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:fliptoggle ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' style=&quot;width:80px; height:30px; position:relative; &quot; id=&quot;&quot;&gt;';
    strTarget += '&lt;w2:on label=&quot;On&quot; value=&quot;On&quot;&gt;&lt;/w2:on&gt;';
    strTarget += '&lt;w2:off label=&quot;Off&quot; value=&quot;Off&quot;&gt;&lt;/w2:off&gt;';
    strTarget += '&lt;/w2:fliptoggle&gt;';
    
    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;fliptoggle&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicFusionChart = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:fusionchart ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' seriesType=&quot;simple&quot; drawType=&quot;javascript&quot; runflashAt=&quot;IE6,IE7,IE8&quot; chartType=&quot;Column2D&quot;	style=&quot;width:300px; height:200px;&quot; id=&quot;&quot; ref=&quot;data:dlt_cData&quot; labelNode=&quot;label&quot; valueNode=&quot;value&quot; seriesNode=&quot;series&quot;&gt;&lt;/w2:fusionchart&gt;';   
    
    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;fusionchart&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicFwBulletChart = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:fwBulletChart ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' chartType=&quot;vbullet&quot; style=&quot;width:200px; height:300px;&quot; id=&quot;&quot; ref=&quot;data:dlt_cData&quot; valueNode=&quot;value&quot; targetNode=&quot;target&quot;&gt;&lt;/w2:fwBulletChart&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;fwBulletChart&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicFwFunnelChart = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:fwFunnelChart ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' seriesType=&quot;simple&quot; style=&quot;width:500px; height:300px; &quot; id=&quot;&quot; ref=&quot;data:dlt_cData&quot; labelNode=&quot;label&quot; valueNode=&quot;value&quot;&gt;&lt;/w2:fwFunnelChart&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;fwFunnelChart&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicFwGanttChart = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:fwGanttChart ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' quarterNames=&quot;1분기,2분기,3분기,4분기&quot; style=&quot;width:500px; height:300px; &quot; id=&quot;&quot; timeBase=&quot;date&quot; monthNames=&quot;1월,2월,3월,4월,5월,6월,7월,8월,9월,10월,11월,12월&quot; dateformat=&quot;yyyyMMdd&quot; ref=&quot;data:dlt_cData&quot; taskNode=&quot;tasks&quot; taskIdNode=&quot;taskid&quot; startDateNode=&quot;startTime&quot; endDateNode=&quot;endTime&quot; processNode=&quot;process&quot;&gt;';
    strTarget += '&lt;/w2:fwGanttChart&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;fwGanttChart&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicFwGaugeChart = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:fwGaugeChart ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' chartType=&quot;angulargauge&quot; style=&quot;width:500px; height:300px; &quot; id=&quot;&quot; ref=&quot;data:dlt_cData&quot; valueNode=&quot;value&quot;&gt;&lt;/w2:fwGaugeChart&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;fwGaugeChart&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicFwPyramidChart = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:fwPyramidChart ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' seriesType=&quot;simple&quot; style=&quot;width:500px; height:300px; &quot; id=&quot;&quot; ref=&quot;data:dlt_cData&quot; labelNode=&quot;label&quot; valueNode=&quot;value&quot;&gt;&lt;/w2:fwPyramidChart&gt;';
    
    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;fwPyramidChart&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicFwRealTimeChart = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';
    strTarget += '&lt;w2:fwRealtimeChart ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' timeformat=&quot;HH:mm:ss&quot; chartType=&quot;realtimearea&quot; style=&quot;width:500px; height:300px; &quot; id=&quot;&quot; ref=&quot;data:dlt_cData&quot; labelNode=&quot;label&quot; valueNode=&quot;value&quot; seriesNode=&quot;series&quot;&gt;&lt;/w2:fwRealtimeChart&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;fwRealtimeChart&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicFwSparkChart = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:fwSparkChart ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' seriesType=&quot;simple&quot; chartType=&quot;sparkline&quot; style=&quot;width:500px; height:300px; &quot; id=&quot;&quot; ref=&quot;data:dlt_cData&quot; labelNode=&quot;label&quot; valueNode=&quot;value&quot;&gt;&lt;/w2:fwSparkChart&gt;';
    
    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;fwSparkChart&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicGenerator = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:generator ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' style=&quot;width:300px;height:200px;&quot;&gt;';        
    strTarget += '&lt;xf:group style=&quot;height:50px;background-color:var(--ws-green-100);&quot; id=&quot;&quot;&gt;';
    strTarget += '&lt;w2:button style=&quot;width:80px; height:23px; &quot; id=&quot;&quot; label=&quot;button&quot;&gt;&lt;/w2:button&gt;';
    strTarget += '&lt;/xf:group&gt;';
    strTarget += '&lt;/w2:generator&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;generator&quot;,
        strTarget,
        grp_comp
    );
	for (var i = 0; i &lt; 3; i++) {
        scwin[cID].insertChild();
    }
}



scwin.createBasicIframe = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:iframe ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' style=&quot;width:500px; height:300px;&quot; id=&quot;&quot;&gt;&lt;/w2:iframe&gt;';
    
    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;iframe&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicImage = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;xf:image ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' src=&quot;/img/WebSquareAI.png&quot;&gt;&lt;/xf:image&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;image&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicInputCalendar = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:inputCalendar ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' id=&quot;&quot; style=&quot;width:150px; height:23px; &quot; calendarValueType=&quot;yearMonthDate&quot;&gt;&lt;/w2:inputCalendar&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;inputCalendar&quot;,
        strTarget,
        grp_comp
    );

    scwin[cID].setValue(&quot;20250101&quot;);
}



scwin.createBasicMapChart = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';
    
    strTarget += '&lt;w2:mapchart ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' style=&quot;width:300px; height:300px;&quot;&gt;&lt;/w2:mapchart&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;mapchart&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicMultiSelect = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;xf:select ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' id=&quot;&quot; appearance=&quot;minimal&quot; style=&quot;width:150px;&quot; ref=&quot;&quot;&gt;';
    strTarget += '&lt;xf:choices&gt;';
    strTarget += '&lt;xf:item&gt;';
    strTarget += '&lt;xf:label&gt;&lt;![CDATA[multiselect1]]&gt;&lt;/xf:label&gt;';
    strTarget += '&lt;xf:value&gt;&lt;![CDATA[1]]&gt;&lt;/xf:value&gt;';
    strTarget += '&lt;/xf:item&gt;';
    strTarget += '&lt;xf:item&gt;';
    strTarget += '&lt;xf:label&gt;&lt;![CDATA[multiselect2]]&gt;&lt;/xf:label&gt;';
    strTarget += '&lt;xf:value&gt;&lt;![CDATA[2]]&gt;&lt;/xf:value&gt;';
    strTarget += '&lt;/xf:item&gt;';
    strTarget += '&lt;xf:item&gt;';
    strTarget += '&lt;xf:label&gt;&lt;![CDATA[multiselect3]]&gt;&lt;/xf:label&gt;';
    strTarget += '&lt;xf:value&gt;&lt;![CDATA[3]]&gt;&lt;/xf:value&gt;';
    strTarget += '&lt;/xf:item&gt;';
    strTarget += '&lt;/xf:choices&gt;';
    strTarget += '&lt;/xf:select&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;multiselect&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicMultiUpload = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:multiupload ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' mode=&quot;html5_transparent&quot; style=&quot;width:300px; height:150px;background-color: silver;&quot; id=&quot;&quot; uploadButton=&quot;&quot;&gt;';
    strTarget += '&lt;/w2:multiupload&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;multiupload&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicOutput = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;xf:output ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' id=&quot;&quot; label=&quot;&quot; style=&quot;width:150px;height:50px;background-color:#C0C0C0;&quot;&gt;';
    strTarget += '&lt;xf:label&gt;&lt;![CDATA[output]]&gt;&lt;/xf:label&gt;';
    strTarget += '&lt;/xf:output&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;output&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicPageControl = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:pageControl ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' style=&quot;width:150px; height:30px; &quot; id=&quot;&quot;&gt;&lt;/w2:pageControl&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;pageControl&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicPageList = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:pageList ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' pageSize=&quot;10&quot; displayButtonType=&quot;display&quot; id=&quot;pageList&quot; displayFormat=&quot;#&quot; style=&quot;width:350px; height:21px; &quot;&gt;&lt;/w2:pageList&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;pageList&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicPivot = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:pivot ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' dataList=&quot;dlt_pData&quot; contextMenuGetter=&quot;getContext&quot; style=&quot;width:600px;height:600px;margin-top:10px;margin-left:10px;margin-right:10px;&quot; showZero=&quot;true&quot; rows=&quot;col4,col5,col8&quot; bodyTextAlign=&quot;right&quot; totalTextAlign=&quot;right&quot; cols=&quot;col6,col7&quot; vals=&quot;col3&quot; excludeHiddenList=&quot;&quot; aggregatorName=&quot;Sum&quot; useNumberFormat=&quot;true&quot; digitsAfterDecimal=&quot;2&quot; showGrandTotal=&quot;true&quot; valuesAxis=&quot;row&quot; class=&quot;mt35&quot; ev:onRefresh=&quot;&quot; ev:oncellclick=&quot;cellClick&quot;&gt;';
    strTarget += '&lt;w2:fieldInfo&gt;';
    strTarget += '&lt;w2:field id=&quot;col1&quot; name=&quot;row&quot; sortOrder=&quot;&quot; &gt;&lt;/w2:field&gt;';
    strTarget += '&lt;w2:field id=&quot;col2&quot; name=&quot;total_bill&quot; sortOrder=&quot;&quot; &gt;&lt;/w2:field&gt;';
    strTarget += '&lt;w2:field id=&quot;col3&quot; name=&quot;tip&quot; sortOrder=&quot;&quot; &gt;&lt;/w2:field&gt;';
    strTarget += '&lt;w2:field id=&quot;col4&quot; name=&quot;sex&quot; sortOrder=&quot;&quot; &gt;&lt;/w2:field&gt;';
    strTarget += '&lt;w2:field id=&quot;col5&quot; name=&quot;smoker&quot; sortOrder=&quot;&quot; &gt;&lt;/w2:field&gt;';
    strTarget += '&lt;w2:field id=&quot;col6&quot; name=&quot;day&quot; sortOrder=&quot;&quot; &gt;&lt;/w2:field&gt;';
    strTarget += '&lt;w2:field id=&quot;col7&quot; name=&quot;time&quot; sortOrder=&quot;&quot; &gt;&lt;/w2:field&gt;';
    strTarget += '&lt;w2:field id=&quot;col8&quot; name=&quot;size&quot; sortOrder=&quot;&quot; &gt;&lt;/w2:field&gt;';
    strTarget += '&lt;/w2:fieldInfo&gt;';
    strTarget += '&lt;/w2:pivot&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;pivot&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicProgressBar = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:progressbar ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' duration=&quot;1000&quot; min=&quot;0&quot; max=&quot;100&quot; valueType=&quot;percent&quot; step=&quot;10&quot; progressClass=&quot;type2&quot; style=&quot;width:200px; height:23px; &quot; id=&quot;progressbar1&quot;&gt;';
    strTarget += '&lt;/w2:progressbar&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;progressbar&quot;,
        strTarget,
        grp_comp
    );    
}




scwin.createBasicRadio = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;xf:select1 ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' id=&quot;&quot; selectedIndex=&quot;-1&quot; appearance=&quot;full&quot; style=&quot;width:150px;&quot; cols=&quot;&quot; rows=&quot;&quot; ref=&quot;&quot;&gt;';
    strTarget += '&lt;xf:choices&gt;';
    strTarget += '&lt;xf:item&gt;';
    strTarget += '&lt;xf:label&gt;&lt;![CDATA[직장인]]&gt;&lt;/xf:label&gt;';
    strTarget += '&lt;xf:value&gt;&lt;![CDATA[1]]&gt;&lt;/xf:value&gt;';
    strTarget += '&lt;/xf:item&gt;';
    strTarget += '&lt;xf:item&gt;';
    strTarget += '&lt;xf:label&gt;&lt;![CDATA[학생]]&gt;&lt;/xf:label&gt;';
    strTarget += '&lt;xf:value&gt;&lt;![CDATA[2]]&gt;&lt;/xf:value&gt;';
    strTarget += '&lt;/xf:item&gt;';
    strTarget += '&lt;xf:item&gt;';
    strTarget += '&lt;xf:label&gt;&lt;![CDATA[주부]]&gt;&lt;/xf:label&gt;';
    strTarget += '&lt;xf:value&gt;&lt;![CDATA[3]]&gt;&lt;/xf:value&gt;';
    strTarget += '&lt;/xf:item&gt;';
    strTarget += '&lt;/xf:choices&gt;';
    strTarget += '&lt;/xf:select1&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;radio&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicRoundRectangle = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:roundRectangle ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' borderWidth=&quot;1&quot; style=&quot;width:100px; height:100px; position:relative;background-color: silver;&quot; id=&quot;&quot; arcsize=&quot;15&quot;&gt;&lt;/w2:roundRectangle&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;roundRectangle&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicScheduleCalendar = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:scheduleCalendar ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' selectable=&quot;&quot; id=&quot;&quot; style=&quot;width:500px; height:300px; &quot; idColumn=&quot;&quot; headerTitle=&quot;&quot; ioFormat=&quot;yyyyMMdd&quot; lang=&quot;&quot; dayMaxEvents=&quot;true&quot; editable=&quot;&quot; headerRightBtn=&quot;&quot; titleColumn=&quot;&quot; startColumn=&quot;&quot; dataList=&quot;&quot; headerLeftBtn=&quot;&quot;&gt;';
    strTarget += '&lt;/w2:scheduleCalendar&gt;';
    
    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;scheduleCalendar&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicSearchBox = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:searchbox ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' id=&quot;searchbox1&quot; style=&quot;width:150px; height:30px;&quot; ev:onmousedown=&quot;scwin.searchbox1_onmousedown&quot;&gt;&lt;/w2:searchbox&gt;';
    
    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;searchbox&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicSelectBox = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;xf:select1 ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' style=&quot;width:150px; height:30px;&quot;&gt;';
    strTarget += '&lt;xf:choices&gt;';
    strTarget += '&lt;xf:itemset nodeset=&quot;data:gdl_selectbox&quot;&gt;';
    strTarget += '&lt;xf:label ref=&quot;label&quot;&gt;&lt;/xf:label&gt;';
    strTarget += '&lt;xf:value ref=&quot;value&quot;&gt;&lt;/xf:value&gt;';
    strTarget += '&lt;/xf:itemset&gt;';
    strTarget += '&lt;/xf:choices&gt;';
    strTarget += '&lt;/xf:select1&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;selectbox&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicSlideHide = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:slideHide ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' firstStatus=&quot;slide&quot; hideEvent=&quot;&quot; moveSize=&quot;&quot; showSize=&quot;15&quot; slideDirection=&quot;left&quot; slideEvent=&quot;&quot; style=&quot;position:relative;width:95px;height:182px;&quot;&gt;';
    strTarget += '&lt;xf:group class=&quot;&quot; ev:onclick=&quot;fn_slideHide&quot; id=&quot;grp_slide_hide&quot; style=&quot;position:absolute;left:0px;height:100%;width: 15px;background-color: #bbb;&quot;&gt;';
    strTarget += '&lt;/xf:group&gt;';
    strTarget += '&lt;w2:textbox id=&quot;&quot; label=&quot;Favorite&quot; style=&quot;padding:10px 4px;margin-left:15px;color:#bbb;font-weight:bold;background-color:#fff;border-bottom:4px double #ccc;&quot;&gt;';
    strTarget += '&lt;/w2:textbox&gt;';
    strTarget += '&lt;w2:textbox id=&quot;&quot; label=&quot;- Fruits&quot; style=&quot;padding:6px 4px;margin-left:15px;color:#bbb;font-weight:bold;background-color:#fff;&quot;&gt;';
    strTarget += '&lt;/w2:textbox&gt;';
    strTarget += '&lt;w2:textbox id=&quot;&quot; label=&quot;- Fish&quot; style=&quot;padding:6px 4px;margin-left:15px;color:#bbb;font-weight:bold;background-color:#fff;&quot;&gt;&lt;/w2:textbox&gt;';
    strTarget += '&lt;/w2:slideHide&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;slideHide&quot;,
        strTarget,
        grp_comp
    );

    fn_slideHide = function(e) {
        if (scwin.target1.getUserData(&quot;edu_flag&quot;) == null) {
            scwin.target1.setUserData(&quot;edu_flag&quot;, &quot;y&quot;);
            scwin.target1.startHide();
        } else {
            scwin.target1.setUserData(&quot;edu_flag&quot;, null);
            scwin.target1.startSlide();
        }
    };
}



scwin.createBasicSlider = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:slider ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' style=&quot;width:200px; height:30px; position:relative; &quot; id=&quot;&quot;&gt;&lt;/w2:slider&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;slider&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicSpan = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:span ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' label=&quot;span&quot; style=&quot; height:23px; &quot; id=&quot;&quot;&gt;&lt;/w2:span&gt;';
    
    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;span&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicSpinner = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:spinner ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' skin=&quot;type1&quot; buttonSize=&quot;30&quot; inputReadOnly=&quot;false&quot; id=&quot;&quot;&gt;&lt;/w2:spinner&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;spinner&quot;,
        strTarget,
        grp_comp
    );
}




scwin.createBasicSwitch = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';
    let strCase1 = '';
    let strCase2 = '';

    strTarget += '&lt;xf:switch ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' style=&quot;position: relative ;width: 200px;height: 200px;&quot;&gt;';
    strTarget += '&lt;xf:case style=&quot;position:absolute;top:2px;left:2px;width:196px;height:196px;&quot; id=&quot;case1&quot;&gt;';
    strTarget += '&lt;w2:button style=&quot;width:80px; height:23px; &quot; id=&quot;case1_button1&quot; label=&quot;case1&quot;&gt;&lt;/w2:button&gt;';
    strTarget += '&lt;/xf:case&gt;';
    strTarget += '&lt;xf:case style=&quot;position:absolute;top:2px;left:2px;width:196px;height:196px;&quot; id=&quot;case2&quot;&gt;';
    strTarget += '&lt;xf:input id=&quot;case2_input1&quot; style=&quot;width:144px; height:21px; &quot; initValue=&quot;case2&quot;&gt;&lt;/xf:input&gt;';
    strTarget += '&lt;/xf:case&gt;';
    strTarget += '&lt;/xf:switch&gt;';
    
    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;switch&quot;,
        strTarget,
        grp_comp
    );

    strCase1 += '&lt;w2:button ' + scwin.strNameSpace + ' style=&quot;height:23px;&quot; id=&quot;case1&quot; label=&quot;setSelectedIndex(0)&quot; ev:onclick=&quot;scwin.btn_case1_onclick&quot;&gt;&lt;/w2:button&gt;';
    
    scwin.btn_case1 = await $p.dynamicCreate(
        &quot;btn_case1&quot;,
        &quot;button&quot;,
        strCase1,
        grp_comp
    );

    strCase2 += '&lt;w2:button ' + scwin.strNameSpace + ' style=&quot;height:23px;&quot; id=&quot;case2&quot; label=&quot;setSelectedIndex(1)&quot; ev:onclick=&quot;scwin.btn_case2_onclick&quot;&gt;&lt;/w2:button&gt;';

    scwin.btn_case2 = await $p.dynamicCreate(
        &quot;btn_case2&quot;,
        &quot;button&quot;,
        strCase2,
        grp_comp
    );
}



scwin.createBasicTabControl = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:tabControl ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' id=&quot;&quot; alwaysDraw=&quot;false&quot; style=&quot;width:500px;height:200px;&quot;&gt;';
    strTarget += '&lt;w2:tabs disabled=&quot;false&quot; style=&quot;height:40px;&quot; id=&quot;tabs1&quot; label=&quot;Tabs1&quot;&gt;&lt;/w2:tabs&gt;';
    strTarget += '&lt;w2:tabs disabled=&quot;false&quot; style=&quot;height:40px&quot; id=&quot;tabs2&quot; label=&quot;Tabs2&quot;&gt;&lt;/w2:tabs&gt;';
    strTarget += '&lt;w2:content alwaysDraw=&quot;false&quot; style=&quot;height:160px;&quot; id=&quot;content1&quot;&gt;';
    strTarget += '&lt;w2:button style=&quot;width:80px; height:23px; &quot; id=&quot;&quot; label=&quot;tabs1&quot;&gt;&lt;/w2:button&gt;';
    strTarget += '&lt;/w2:content&gt;';
    strTarget += '&lt;w2:content alwaysDraw=&quot;false&quot; style=&quot;height:160px&quot; id=&quot;content2&quot;&gt;';
    strTarget += '&lt;xf:input id=&quot;&quot; style=&quot;width:144px; height:21px; &quot; initValue=&quot;tabs2&quot;&gt;&lt;/xf:input&gt;';
    strTarget += '&lt;/w2:content&gt;';
    strTarget += '&lt;/w2:tabControl&gt;';
    
    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;tabControl&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicTextArea = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;xf:textarea ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' id=&quot;&quot; style=&quot;width:300px; height:100px; &quot;&gt;&lt;/xf:textarea&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;textarea&quot;,
        strTarget,
        grp_comp
    );
}


scwin.createBasicTextBox = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:textbox ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' id=&quot;&quot; label=&quot;textbox&quot; style=&quot;width:150px; height:23px; &quot;&gt;&lt;/w2:textbox&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;textbox&quot;,
        strTarget,
        grp_comp
    );
}


scwin.createBasicTreeView = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:treeview ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' id=&quot;&quot; dataType=&quot;listed&quot; tooltipGroupClass=&quot;false&quot; style=&quot;width:200px;&quot;&gt;';
    strTarget += '&lt;w2:itemset nodeset=&quot;data:dlt_treeview_item&quot;&gt;';
    strTarget += '&lt;w2:label ref=&quot;label&quot;&gt;&lt;/w2:label&gt;';
    strTarget += '&lt;w2:value ref=&quot;value&quot;&gt;&lt;/w2:value&gt;';
    strTarget += '&lt;w2:depth ref=&quot;depth&quot;&gt;&lt;/w2:depth&gt;';
    strTarget += '&lt;w2:folder ref=&quot;&quot;&gt;&lt;/w2:folder&gt;';
    strTarget += '&lt;w2:checkbox ref=&quot;&quot;&gt;&lt;/w2:checkbox&gt;';
    strTarget += '&lt;w2:checkboxDisabled ref=&quot;&quot;&gt;&lt;/w2:checkboxDisabled&gt;';
    strTarget += '&lt;w2:image ref=&quot;&quot;&gt;&lt;/w2:image&gt;';
    strTarget += '&lt;w2:iconImage ref=&quot;&quot;&gt;&lt;/w2:iconImage&gt;';
    strTarget += '&lt;w2:selectedImage ref=&quot;&quot;&gt;&lt;/w2:selectedImage&gt;';
    strTarget += '&lt;w2:expandedImage ref=&quot;&quot;&gt;&lt;/w2:expandedImage&gt;';
    strTarget += '&lt;w2:leafImage ref=&quot;&quot;&gt;&lt;/w2:leafImage&gt;';
    strTarget += '&lt;/w2:itemset&gt;';
    strTarget += '&lt;/w2:treeview&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;treeview&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicTrigger = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;xf:trigger ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' type=&quot;button&quot; id=&quot;&quot; style=&quot;width:80px;&quot;&gt;';
    strTarget += '&lt;xf:label&gt;&lt;![CDATA[trigger]]&gt;&lt;/xf:label&gt;';
    strTarget += '&lt;/xf:trigger&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;trigger&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicUpload = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:upload ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' imageStyle=&quot;position:absolute;vertical-align:middle;word-wrap:break-word&quot; inputStyle=&quot;vertical-align:middle;word-wrap:break-word&quot; style=&quot;width:250px;&quot; id=&quot;&quot;&gt;';
    strTarget += '&lt;/w2:upload&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;upload&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicWframe = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:wframe ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' style=&quot;width:500px; height:300px; &quot; id=&quot;&quot; src=&quot;/sample/common_link/wframe_link_1.xml&quot;&gt;&lt;/w2:wframe&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;wframe&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicWidgetContainer = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:widgetContainer ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' mode=&quot;&quot; style=&quot;width:300px;height:200px;&quot; id=&quot;widgetContainer1&quot; cols=&quot;&quot;&gt;&lt;/w2:widgetContainer&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;widgetContainer&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicWindowContainer = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:windowContainer ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' style=&quot;width:500px; height:300px; position:relative;&quot;&gt;';
    strTarget += '&lt;w2:windowToolbar&gt;';
    strTarget += '&lt;w2:controlIconLayer&gt;';
    strTarget += '&lt;w2:controlIcon&gt;&lt;/w2:controlIcon&gt;';
    strTarget += '&lt;w2:controlIcon&gt;&lt;/w2:controlIcon&gt;';
    strTarget += '&lt;w2:controlIcon&gt;&lt;/w2:controlIcon&gt;';
    strTarget += '&lt;w2:controlIcon&gt;&lt;/w2:controlIcon&gt;';
    strTarget += '&lt;w2:controlIcon&gt;&lt;/w2:controlIcon&gt;';
    strTarget += '&lt;/w2:controlIconLayer&gt;';
    strTarget += '&lt;w2:nameLayer&gt;&lt;/w2:nameLayer&gt;';
    strTarget += '&lt;w2:selectedNameLayer&gt;&lt;/w2:selectedNameLayer&gt;';
    strTarget += '&lt;/w2:windowToolbar&gt;';
    strTarget += '&lt;/w2:windowContainer&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;windowContainer&quot;,
        strTarget,
        grp_comp
    );
}



scwin.createBasicGridView = async function (grp_comp, cList='', eHandler='', cID='target1') {
    let strTarget = '';

    strTarget += '&lt;w2:gridView ' + scwin.strNameSpace + ' ' + cList + ' ' + eHandler + ' checkAllType=&quot;false&quot; defaultCellHeight=&quot;20&quot; id=&quot;&quot; style=&quot;width:500px; height:150px; &quot; dataList=&quot;data:gdl_gridview&quot;&gt;';
    strTarget += '&lt;w2:caption style=&quot;&quot; id=&quot;caption1&quot; value=&quot;this is a grid caption.&quot;&gt;&lt;/w2:caption&gt;';
    strTarget += '&lt;w2:header style=&quot;&quot; id=&quot;header1&quot;&gt;';
    strTarget += '&lt;w2:row style=&quot;&quot; id=&quot;row1&quot;&gt;';
    strTarget += '&lt;w2:column width=&quot;70&quot; inputType=&quot;text&quot; id=&quot;column3&quot; value=&quot;name1&quot; displayMode=&quot;label&quot;&gt;&lt;/w2:column&gt;';
    strTarget += '&lt;w2:column width=&quot;70&quot; inputType=&quot;text&quot; id=&quot;column2&quot; value=&quot;name2&quot; displayMode=&quot;label&quot;&gt;&lt;/w2:column&gt;';
    strTarget += '&lt;w2:column width=&quot;70&quot; inputType=&quot;text&quot; id=&quot;column1&quot; value=&quot;name3&quot; displayMode=&quot;label&quot;&gt;&lt;/w2:column&gt;';
    strTarget += '&lt;/w2:row&gt;';
    strTarget += '&lt;/w2:header&gt;';
    strTarget += '&lt;w2:gBody style=&quot;&quot; id=&quot;gBody1&quot;&gt;';
    strTarget += '&lt;w2:row style=&quot;&quot; id=&quot;row2&quot;&gt;';
    strTarget += '&lt;w2:column width=&quot;70&quot; inputType=&quot;text&quot; id=&quot;column1&quot; displayMode=&quot;label&quot;&gt;&lt;/w2:column&gt;';
    strTarget += '&lt;w2:column width=&quot;70&quot; inputType=&quot;text&quot; id=&quot;column2&quot; displayMode=&quot;label&quot;&gt;&lt;/w2:column&gt;';
    strTarget += '&lt;w2:column width=&quot;70&quot; inputType=&quot;text&quot; id=&quot;column3&quot; displayMode=&quot;label&quot;&gt;&lt;/w2:column&gt;';
    strTarget += '&lt;/w2:row&gt;';
    strTarget += '&lt;/w2:gBody&gt;';
    strTarget += '&lt;/w2:gridView&gt;';

    // target 생성
    scwin[cID] = await $p.dynamicCreate(
        cID,
        &quot;gridView&quot;,
        strTarget,
        grp_comp
    );
}



// property 조건을 key=&quot;value&quot; 형태로 리턴
scwin.createCList = function (properties) {
    return Object.entries(properties)
        .filter(([key, value]) =&gt; value !== &quot;&quot;)  // 빈 문자열 제외
        .map(([key, value]) =&gt; `${key}=&quot;${value}&quot;`)  // key=&quot;value&quot; 형태로 변환
        .join(' ');  // 공백으로 각 property 연결
}



// event 동적생성 형태로 리턴
scwin.createEList = function (arrEvents) {
    debugger;
    if (arrEvents.length &gt; 0) {
        let eventsString = '';

        for (var i = 0; i &lt; arrEvents.length; i++) {
            eventsString += `ev:${arrEvents[i]}=&quot;scwin.target1_${arrEvents[i]}&quot; `
        }

        return eventsString;
    }
    else
        return '';
}</script>
	</head>
	<body ev:onpageload="scwin.onpageload">
	</body>
</html>
